Encore Runtime Patch
=======================

This patch modifies the Go runtime to add Encore specific tracking data to the Go Routines `g` struct and Trace the
the and finish of a Go Routine executed due to a request made to your Encore app.

diff --git a/src/runtime/proc.go b/src/runtime/proc.go
index aba2e2b27b..588a98ff74 100644
--- a/src/runtime/proc.go
+++ b/src/runtime/proc.go
@@ -3617,6 +3617,11 @@ func goexit0(gp *g) {
 	mp := getg().m
 	pp := mp.p.ptr()

+	if e := gp.encore; e != nil {
+		exitEncoreG(e)
+		gp.encore = nil
+	}
+
 	casgstatus(gp, _Grunning, _Gdead)
 	gcController.addScannableStack(pp, -int64(gp.stack.hi-gp.stack.lo))
 	if isSystemGoroutine(gp, false) {
@@ -4286,6 +4291,11 @@ func newproc1(fn *funcval, callergp *g, callerpc uintptr) *g {
 	newg.parentGoid = callergp.goid
 	newg.gopc = callerpc
 	newg.ancestors = saveAncestors(callergp)
+
+	if e := callergp.encore; e != nil {
+		newg.encore = startEncoreG(e)
+	}
+
 	newg.startpc = fn.fn
 	if isSystemGoroutine(newg, false) {
 		sched.ngsys.Add(1)

diff --git a/src/runtime/runtime2.go b/src/runtime/runtime2.go
index 4a78963961..87932dfd73 100644
--- a/src/runtime/runtime2.go
+++ b/src/runtime/runtime2.go
@@ -516,6 +516,8 @@ type g struct {
 
 	coroarg *coro // argument during coroutine transfers
 
+	encore unsafe.Pointer // encore-specific goroutine data
+
 	// Per-G tracer state.
 	trace gTraceState
 
