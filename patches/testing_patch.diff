Testing Patch
====================

Encore's framework creates resources as package level variables. This makes running tests in parallel harder, as each
test runs against global state. This patch introduces a per test level callback which allows the runtime to track the
test and not have state between tests interfere with each other.

diff --git a/src/testing/testing.go b/src/testing/testing.go
index fc34cbf28b..37f54b482b 100644
--- a/src/testing/testing.go
+++ b/src/testing/testing.go
@@ -1380,10 +1380,14 @@ func (t *T) Parallel() {
 	}
 	running.Delete(t.name)

+	encorePauseTest(t)
+
 	t.signal <- true   // Release calling test.
 	<-t.parent.barrier // Wait for the parent test to complete.
 	t.context.waitParallel()

+	encoreResumeTest(t)
+
 	if t.chatty != nil {
 		t.chatty.Updatef(t.name, "=== CONT  %s\n", t.name)
 	}
@@ -1432,12 +1436,14 @@ var errNilPanicOrGoexit = errors.New("test executed panic(nil) or runtime.Goexit

 func tRunner(t *T, fn func(t *T)) {
 	t.runner = callerName(0)
+	encoreStartTest(t)

 	// When this goroutine is done, either because fn(t)
 	// returned normally or because a test failure triggered
 	// a call to runtime.Goexit, record the duration and send
 	// a signal saying that the test is done.
 	defer func() {
+		encoreEndTest(t)
 		if t.Failed() {
 			numFailed.Add(1)
 		}
