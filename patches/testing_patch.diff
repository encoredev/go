Testing Patch
====================

Encore's framework creates resources as package level variables. This makes running tests in parallel harder, as each
test runs against global state. This patch introduces a per test level callback which allows the runtime to track the
test and not have state between tests interfere with each other.

diff --git a/src/testing/testing.go b/src/testing/testing.go
index 5c06aea5f8..0db6bb40ab 100644
--- a/src/testing/testing.go
+++ b/src/testing/testing.go
@@ -767,6 +767,12 @@ func (c *common) frameSkip(skip int) runtime.Frame {
 // and inserts the final newline if needed and indentation spaces for formatting.
 // This function must be called with c.mu held.
 func (c *common) decorate(s string, skip int) string {
+	// allow encore to capture the log as well;
+	// we do it here so that all the branches which result in a log message
+	// during tests get captured, however we do it _before_ the liens get modified
+	// and indented.
+	encoreTestLog(s, skip+1)
+
 	frame := c.frameSkip(skip)
 	file := frame.File
 	line := frame.Line
@@ -1479,10 +1485,14 @@ func (t *T) Parallel() {
 	}
 	running.Delete(t.name)

+	encorePauseTest(t)
+
 	t.signal <- true   // Release calling test.
 	<-t.parent.barrier // Wait for the parent test to complete.
 	t.context.waitParallel()

+	encoreResumeTest(t)
+
 	if t.chatty != nil {
 		t.chatty.Updatef(t.name, "=== CONT  %s\n", t.name)
 	}
@@ -1538,6 +1548,7 @@ var errNilPanicOrGoexit = errors.New("test executed panic(nil) or runtime.Goexit

 func tRunner(t *T, fn func(t *T)) {
 	t.runner = callerName(0)
+	encoreStartTest(t, fn)

 	// When this goroutine is done, either because fn(t)
 	// returned normally or because a test failure triggered
@@ -1545,6 +1556,7 @@ func tRunner(t *T, fn func(t *T)) {
 	// a signal saying that the test is done.
 	defer func() {
 		t.checkRaces()
+		encoreEndTest(t)

 		// TODO(#61034): This is the wrong place for this check.
 		if t.Failed() {
