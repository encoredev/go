Testing Patch
====================

Encore's framework creates resources as package level variables. This makes running tests in parallel harder, as each
test runs against global state. This patch introduces a per test level callback which allows the runtime to track the
test and not have state between tests interfere with each other.

diff --git a/src/testing/testing.go b/src/testing/testing.go
index 3475bfca4a..074755aef1 100644
--- a/src/testing/testing.go
+++ b/src/testing/testing.go
@@ -1017,6 +1017,12 @@ func (c *common) FailNow() {
 // indentation and the final newline if necessary. It prefixes the string
 // with the file and line of the call site.
 func (c *common) log(s string) {
+	// allow encore to capture the log as well;
+	// we do it here so that all the branches which result in a log message
+	// during tests get captured, however we do it _before_ the lines get modified
+	// and indented.
+	encoreTestLog(s, 3)
+
 	s = strings.TrimSuffix(s, "\n")
 
 	// Second and subsequent lines are indented 4 spaces. This is in addition to
@@ -1704,11 +1710,15 @@ func (t *T) Parallel() {
 	}
 	running.Delete(t.name)
 
+	encorePauseTest(t)
+
 	t.signal <- true   // Release calling test.
 	<-t.parent.barrier // Wait for the parent test to complete.
 	t.tstate.waitParallel()
 	parallelStart.Add(1)
 
+	encoreResumeTest(t)
+
 	if t.chatty != nil {
 		t.chatty.Updatef(t.name, "=== CONT  %s\n", t.name)
 	}
@@ -1773,6 +1783,7 @@ var errNilPanicOrGoexit = errors.New("test executed panic(nil) or runtime.Goexit
 
 func tRunner(t *T, fn func(t *T)) {
 	t.runner = callerName(0)
+	encoreStartTest(t, fn)
 
 	// When this goroutine is done, either because fn(t)
 	// returned normally or because a test failure triggered
@@ -1780,6 +1791,7 @@ func tRunner(t *T, fn func(t *T)) {
 	// a signal saying that the test is done.
 	defer func() {
 		t.checkRaces()
+		encoreEndTest(t)
 
 		// TODO(#61034): This is the wrong place for this check.
 		if t.Failed() {
