Testing Patch
====================

Encore's framework creates resources as package level variables. This makes running tests in parallel harder, as each
test runs against global state. This patch introduces a per test level callback which allows the runtime to track the
test and not have state between tests interfere with each other.

diff --git a/src/testing/testing.go b/src/testing/testing.go
index df4dfe4490..10052e09b6 100644
--- a/src/testing/testing.go
+++ b/src/testing/testing.go
@@ -1260,10 +1260,14 @@ func (t *T) Parallel() {
 		t.chatty.Updatef(t.name, "=== PAUSE %s\n", t.name)
 	}

+	encoreTestPaused(t)
+
 	t.signal <- true   // Release calling test.
 	<-t.parent.barrier // Wait for the parent test to complete.
 	t.context.waitParallel()

+	encoreTestResumed(t)
+
 	if t.chatty != nil {
 		t.chatty.Updatef(t.name, "=== CONT  %s\n", t.name)
 	}
@@ -1298,12 +1302,14 @@ var errNilPanicOrGoexit = errors.New("test executed panic(nil) or runtime.Goexit

 func tRunner(t *T, fn func(t *T)) {
 	t.runner = callerName(0)
+	encoreTestStart(t)

 	// When this goroutine is done, either because fn(t)
 	// returned normally or because a test failure triggered
 	// a call to runtime.Goexit, record the duration and send
 	// a signal saying that the test is done.
 	defer func() {
+		encoreTestEnd(t)
 		if t.Failed() {
 			atomic.AddUint32(&numFailed, 1)
 		}
