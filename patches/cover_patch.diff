Code Coverage Patch
====================

Go's code coverage is based on generating a manifest of all the files that are built.
Since Encore's code generation adds some extra files, this doesn't quite work.
This patch fixes this by skipping over these files, and reading the source file
using the overlay file system instead of directly from disk.

diff --git a/src/cmd/go/internal/test/cover.go b/src/cmd/go/internal/test/cover.go
index e295c2d90f..599a88731e 100644
--- a/src/cmd/go/internal/test/cover.go
+++ b/src/cmd/go/internal/test/cover.go
@@ -69,7 +69,7 @@ func mergeCoverProfile(file string) {
 		base.Errorf("test wrote malformed coverage profile %s: header %q, expected %q: %v", file, string(buf), expect, err)
 		return
 	}
-	_, err = io.Copy(coverMerge.f, r)
+	err = copyCoverageProfile(r, coverMerge.f)
 	if err != nil {
 		base.Errorf("saving coverage profile: %v", err)
 		return
diff --git a/src/cmd/go/internal/work/exec.go b/src/cmd/go/internal/work/exec.go
index 63fd13f754..eeb79cd7f5 100644
--- a/src/cmd/go/internal/work/exec.go
+++ b/src/cmd/go/internal/work/exec.go
@@ -647,7 +647,7 @@ OverlayLoop:
 		outfiles := []string{}
 		infiles := []string{}
 		for i, file := range str.StringList(gofiles, cgofiles) {
-			if base.IsTestFile(file) {
+			if base.IsTestFile(file) || strings.Contains(file, "encore_internal__") {
 				continue // Not covering this file.
 			}
 
@@ -663,6 +663,7 @@ OverlayLoop:
 				coverFile = objdir + file
 			}
 			coverFile = strings.TrimSuffix(coverFile, ".go") + ".cover.go"
+			sourceFile = fsys.Actual(sourceFile)
 			infiles = append(infiles, sourceFile)
 			outfiles = append(outfiles, coverFile)
 			if i < len(gofiles) {
