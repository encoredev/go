Code Coverage Patch
====================

Go's code coverage is based on generating a manifest of all the files that are built.
Since Encore's code generation adds some extra files, this doesn't quite work.
This patch fixes this by skipping over these files, and reading the source file
using the overlay file system instead of directly from disk.

diff --git a/src/cmd/go/internal/load/pkg.go b/src/cmd/go/internal/load/pkg.go
index 7c0c104883..3cf8bb1fd3 100644
--- a/src/cmd/go/internal/load/pkg.go
+++ b/src/cmd/go/internal/load/pkg.go
@@ -3438,7 +3438,7 @@ func DeclareCoverVars(p *Package, files ...string) map[string]*CoverVar {
 	sum := sha256.Sum256([]byte(p.ImportPath))
 	h := fmt.Sprintf("%x", sum[:6])
 	for _, file := range files {
-		if base.IsTestFile(file) {
+		if base.IsTestFile(file) || strings.Contains(file, "encore_internal__") {
 			continue
 		}
 		// For a package that is "local" (imported via ./ import or command line, outside GOPATH),

diff --git a/src/cmd/go/internal/work/exec.go b/src/cmd/go/internal/work/exec.go
index 9c8b14df00..1ebee98a2a 100644
--- a/src/cmd/go/internal/work/exec.go
+++ b/src/cmd/go/internal/work/exec.go
@@ -623,7 +623,7 @@ OverlayLoop:
 		outfiles := []string{}
 		infiles := []string{}
 		for i, file := range str.StringList(gofiles, cgofiles) {
-			if base.IsTestFile(file) {
+			if base.IsTestFile(file) || strings.Contains(file, "encore_internal__") {
 				continue // Not covering this file.
 			}

@@ -642,12 +642,13 @@ OverlayLoop:
 				key = file
 			}
 			coverFile = strings.TrimSuffix(coverFile, ".go") + ".cover.go"
+			sourceFile, _ = fsys.OverlayPath(sourceFile)
 			if cfg.Experiment.CoverageRedesign {
 				infiles = append(infiles, sourceFile)
 				outfiles = append(outfiles, coverFile)
 			} else {
 				cover := p.Internal.CoverVars[key]
-				if cover == nil {
+				if cover == nil || base.IsTestFile(file) {
 					continue // Not covering this file.
 				}
 				if err := b.cover(a, coverFile, sourceFile, cover.Var); err != nil {
